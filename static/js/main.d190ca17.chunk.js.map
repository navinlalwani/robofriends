{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Components/Errorboundry.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","src","name","email","Cardlist","cardarray","robots","map","user","key","id","Searchbox","textentry","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","Errorboundry","state","hasError","error","info","this","setState","React","Component","App","searchpuch","event","searchtext","target","value","fetch","then","resp","json","data","filteredrobots","filter","robot","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCJSC,EAZF,SAACC,GACb,OACC,yBAAKC,UAAY,uDAChB,yBAAKC,IAAG,+BAA4BF,EAAMG,KAAlC,aACR,6BACC,4BAAKH,EAAMG,MACX,2BAAIH,EAAMI,UCMCC,EAVE,SAAC,GAAgB,IAC3BC,EAD0B,EAAbC,OACMC,KAAI,SAACC,GAC7B,OAAQ,kBAAC,EAAD,CAAMC,IAAOD,EAAKE,GAAIA,GAAKF,EAAKE,GAAIR,KAAMM,EAAKN,KAAMC,MAAOK,EAAKL,WAE1E,OACA,6BACCE,ICIaM,EAZG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UACnB,OACC,6BACA,2BAAOZ,UAAY,mCACnBa,KAAO,SACPC,YAAc,eACdC,SAAYH,MCICI,EAVA,SAACjB,GACf,OACD,yBAAKkB,MAAS,CAACC,UAAY,SAAUC,OAAS,kBAAmBC,OAAS,UACvErB,EAAMsB,WCmBMC,E,kDArBd,WAAYvB,GAAQ,IAAD,8BAClB,cAAMA,IACDwB,MAAQ,CACZC,UAAW,GAHM,E,8DAQDC,EAAMC,GACxBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,qCAEAG,KAAK5B,MAAMsB,a,GAjBOQ,IAAMC,WC2ClBC,E,kDApCd,aAAe,IAAD,8BACb,gBAaDC,WAAa,SAACC,GACb,EAAKL,SAAS,CAACM,WAAaD,EAAME,OAAOC,SAbzC,EAAKb,MAAQ,CACZW,WAAa,GACb5B,OAAS,IAJG,E,gEAQO,IAAD,OACnB+B,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAI,OAAI,EAAKb,SAAS,CAACtB,OAASmC,S,+BAO7B,IAAD,OACFC,EAAiBf,KAAKJ,MAAMjB,OAAOqC,QAAO,SAACC,GAChD,OAAOA,EAAM1C,KAAK2C,cAAcC,SAAS,EAAKvB,MAAMW,WAAWW,kBAEhE,OACA,yBAAK7C,UAAY,MAChB,wBAAIA,UAAY,gCAAhB,eACA,kBAAC,EAAD,CAAWY,UAAae,KAAKK,aAC7B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAAUoC,W,GA7BJb,IAAMC,WCCzBiB,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.d190ca17.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className = 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5' >\n\t\t\t<img src = {`https://robohash.org/${props.name}200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n// import {robots} from './robots';\n\nconst Cardlist = ( {robots} ) => {\n\tconst cardarray = robots.map((user) => {\n\t\treturn (<Card key = {user.id} id= {user.id} name={user.name} email={user.email} />)\n\t})\n\treturn( \n\t<div>\n\t{cardarray}\n\t</div>\t\n)};\n\nexport default Cardlist;","import React from 'react';\n\nconst Searchbox = ({textentry}) => {\n\treturn ( \n\t\t<div >\n\t\t<input className = 'pa3 ba b--green bg-lightest-blue' \n\t\ttype = \"search\" \n\t\tplaceholder = \"search robot\"\n\t\tonChange = {textentry} \n\t\t/> \n\t\t</div>\n\t\t);\n};\n\nexport default Searchbox;","import React from 'react';\n\nconst Scroll = (props) => {\n return (\n<div style = {{overflowY : 'Scroll', border : '2px solid black', height : '500px'}} >\n \t{props.children}\n </div>\n );\n\n}\n\n\nexport default Scroll;","import React from 'react';\n\nclass Errorboundry extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\thasError : false\n\t\t}\n\t}\n\n\ncomponentDidCatch (error,info) {\n\tthis.setState({hasError : true})\n}\n\nrender() {\n\tif (this.state.hasError) {\n\t\treturn \"Sorry!! we are facing some trouble\"\n\t} else {\n\t\treturn this.props.children;\n\t}\n}\n}\n\nexport default Errorboundry;","import React from 'react';\nimport Cardlist from '../Components/Cardlist';\nimport {robots} from '../robots';\nimport Searchbox from '../Components/Searchbox';\nimport Scroll from '../Components/Scroll';\nimport Errorboundry from '../Components/Errorboundry';\n\n\nclass App  extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tsearchtext : \"\",\n\t\t\trobots : []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(resp => resp.json())\n\t\t.then(data => this.setState({robots : data}))\n\t}\n\n\tsearchpuch = (event) => {\n\t\tthis.setState({searchtext : event.target.value});\n\t} \n\n\trender() {\n\t\tconst filteredrobots = this.state.robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchtext.toLowerCase())\n\t\t})\n\t\treturn (\n\t\t<div className = 'tc'>\n\t\t\t<h1 className = 'avenir ttu tracked f1 yellow'>Robofriends</h1>\n\t\t\t<Searchbox textentry = {this.searchpuch} />\n\t\t\t<Scroll>\n\t\t\t<Errorboundry>\n\t\t\t<Cardlist robots = {filteredrobots} />\n\t\t\t</Errorboundry>\n\t\t\t</Scroll>\n\t\t</div>\n\t\t);\n\t};\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Containers/App';\n\n\n\nReactDOM.render(\n\t<App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}